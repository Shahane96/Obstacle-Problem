

from __future__ import division
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import argparse
import getpass


def parse_args(*argument_array):
    parser = argparse.ArgumentParser()
    parser.set_defaults(function=main)
    args = parser.parse_args(*argument_array)
    return args

def obstacle(x,y):
    obs = 35-(x-0.25)**2 - (y-0.25)**2
    return obs
  

def GS(weights, interval, partition_N, partition_M, it):
    int_len_x = interval[0][len(interval)-1] - interval[0][0]
    int_len_y = interval[1][len(interval)-1] - interval[1][0]
    w = weights
    x = [0]*(partition_N+1)
    y = [0]*(partition_M+1)
    it_1 = 0
    w_t = np.zeros(shape=(partition_M+1,partition_N+1))

    for i in range(0, partition_N+1):
        for j in range(0, partition_M+1):
            x[i] = interval[0][0]+(int_len_x*i) / partition_N
            y[j] = interval[1][0]+(int_len_y*j) / partition_M
    
    for k in range(0, it):
        it_1 +=1
        for i in range(1, len(x)-1): 
            for j in range(1, len(y)-1):
                w[i][j] = max(0.25*(w[i+1][j] + w[i-1][j] + w[i][j+1] + w[i][j-1]),obstacle(x[i],y[j]))
        if(np.linalg.norm(w-w_t)<0.0001):
            print(it_1)
            return {'X': x, 'Y': y, 'W': w} 
            break
        else:
            w_t = np.array(w)
    return {'X': x, 'Y': y, 'W': w}
                     

def main(args):
    N = 1
    M = 1
    interval_obs = [[-7,8],[-7,8]]
    interval_sol = [[-7,8],[-7,8]]
    partition_N = 100
    partition_M = 100
    w = np.zeros(shape=(partition_M+1,partition_N+1))
    it = 100

    k = GS(w, interval_sol, partition_N, partition_M, it)['W']

    fig = plt.figure()
    fig.set_size_inches(18.5, 10.5)
    ax = fig.add_subplot(111, projection='3d')

    X = GS(w, interval_sol, partition_N, partition_M, it)['X']
    X = [list(x) for x  in zip(X)]
    Y = GS(w, interval_sol, partition_N, partition_M, it)['Y']

    X1 = np.arange(-8, 9, 0.05)
    X1 = [list(x) for x  in zip(X1)]
    Y1 = np.arange(-8, 9, 0.05)

    X, Y = np.meshgrid(X, Y)
    Z = GS(w, interval_sol, partition_N, partition_M, it)['W'] 
    X1, Y1 = np.meshgrid(X1, Y1)
    Z1 = 35-(X1-0.25)**2 - (Y1-0.25)**2 

    ax.plot_surface(X1, Y1, Z1, cmap=plt.cm.jet, linewidth=0, antialiased=False)
    ax.plot_surface(X, Y, Z,cmap=plt.cm.jet, linewidth=0, antialiased=False)

    plt.show()

	
if __name__ == '__main__':
    args = parse_args()
    args.function(args)
